import os
import asyncio
import logging
import json
import redis
from typing import Dict, Any, Optional
from datetime import datetime
import tempfile

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ChatAction

import openai
from openai import OpenAI

from src.services.template_service import TemplateService, UserWorkflowService, UserSessionService, ExecutionLogService
from src.services.n8n_api import N8nApiClient
from src.services.voice_service import VoiceService, MemoryService, ReminderService
from src.services.thinking_service import ThinkingService, ThinkingType, ThoughtLevel
from src.services.agent_orchestrator import AgentOrchestrator, TaskPriority

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class N8nTelegramBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.telegram_token = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')
        self.openai_api_key = os.getenv('OPENAI_API_KEY', 'YOUR_OPENAI_API_KEY')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        self.openai_client = OpenAI(api_key=self.openai_api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        try:
            self.redis_client = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
            self.redis_client.ping()
        except:
            logger.warning("Redis –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å")
            self.redis_client = None
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –∫–∞–∫ fallback
        self.local_memory = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.template_service = TemplateService()
        self.workflow_service = UserWorkflowService()
        self.session_service = UserSessionService()
        self.execution_service = ExecutionLogService()
        
        # –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        self.voice_service = VoiceService()
        self.memory_service = MemoryService(self.redis_client)
        self.reminder_service = ReminderService(self.memory_service)
        self.thinking_service = ThinkingService()
        
        # –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤
        self.orchestrator = AgentOrchestrator()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        self.templates_db = self.load_templates_database()
        
    def load_templates_database(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ n8n"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            templates_db = {
                'categories': {
                    'AI': {'count': 1600, 'templates': []},
                    'Multimodal AI': {'count': 1529, 'templates': []},
                    'Marketing': {'count': 717, 'templates': []},
                    'Content Creation': {'count': 488, 'templates': []},
                    'Engineering': {'count': 415, 'templates': []},
                    'Sales': {'count': 364, 'templates': []},
                    'DevOps': {'count': 170, 'templates': []},
                    'Personal Productivity': {'count': 149, 'templates': []}
                },
                'total_templates': 5727
            }
            return templates_db
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return {'categories': {}, 'total_templates': 0}
    
    def get_user_memory(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.redis_client:
            try:
                memory = self.redis_client.get(f"user_memory:{user_id}")
                return json.loads(memory) if memory else {}
            except:
                pass
        return self.local_memory.get(user_id, {})
    
    def set_user_memory(self, user_id: int, memory: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.redis_client:
            try:
                self.redis_client.setex(f"user_memory:{user_id}", 3600, json.dumps(memory))
                return
            except:
                pass
        self.local_memory[user_id] = memory
    
    async def show_thinking(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        thinking_msg = await update.message.reply_text(f"ü§î *–î—É–º–∞—é...* {message}", parse_mode='Markdown')
        await asyncio.sleep(1)
        return thinking_msg
    
    async def update_thinking(self, thinking_msg, new_message: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ã—à–ª–µ–Ω–∏–∏"""
        try:
            await thinking_msg.edit_text(f"üß† *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...* {new_message}", parse_mode='Markdown')
            await asyncio.sleep(0.5)
        except:
            pass
    
    async def process_natural_language(self, text: str, user_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            system_prompt = """
            –¢—ã - NLU –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è Telegram –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è n8n —à–∞–±–ª–æ–Ω–∞–º–∏.
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–π:
            1. intent (–Ω–∞–º–µ—Ä–µ–Ω–∏–µ): search_template, import_template, export_template, activate_workflow, 
               deactivate_workflow, list_workflows, get_help, research_info, analyze_data, set_api_key,
               show_stats, get_categories
            2. entities (—Å—É—â–Ω–æ—Å—Ç–∏): –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, workflow_id, api_key, base_url
            3. confidence (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å): 0.0-1.0
            
            –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {
                "intent": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–Ω–∞–º–µ—Ä–µ–Ω–∏—è",
                "entities": {"category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "template_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "keywords": ["—Å–ª–æ–≤–æ1", "—Å–ª–æ–≤–æ2"], "workflow_id": "id", "api_key": "key", "base_url": "url"},
                "confidence": 0.95
            }
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": text}
                ],
                temperature=0.1
            )
            
            result = json.loads(response.choices[0].message.content)
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ NLU –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {
                "intent": "get_help",
                "entities": {},
                "confidence": 0.5
            }
    
    async def orchestrate_agents(self, intent: str, entities: Dict[str, Any], user_id: int) -> Any:
        """–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if intent == 'set_api_key':
                return await self.handle_set_api_key(entities, user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ
            task_data = {
                'user_id': user_id,
                'entities': entities,
                'intent': intent
            }
            
            # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∫ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
            intent_to_task = {
                'search_template': 'search_templates',
                'get_categories': 'categorize_templates',
                'show_stats': 'categorize_templates',
                'import_template': 'import_template',
                'export_template': 'export_workflow',
                'activate_workflow': 'activate_workflow',
                'deactivate_workflow': 'deactivate_workflow',
                'list_workflows': 'get_workflows',
                'analyze_data': 'system_health'
            }
            
            task_type = intent_to_task.get(intent)
            
            if not task_type:
                return self.get_help_message()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            task_id = await self.orchestrator.submit_task(
                task_type=task_type,
                data=task_data,
                priority=TaskPriority.MEDIUM
            )
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await self.orchestrator.get_task_result(task_id, timeout=30.0)
            
            if not result:
                return "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            if result['status'] == 'failed':
                return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await self.format_agent_result(result, intent)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def handle_set_api_key(self, entities: Dict[str, Any], user_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É API –∫–ª—é—á–∞ n8n"""
        try:
            api_key = entities.get('api_key')
            base_url = entities.get('base_url')
            
            if not api_key or not base_url:
                return """
üîë **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ n8n**

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–£—Å—Ç–∞–Ω–æ–≤–∏ API –∫–ª—é—á: YOUR_API_KEY –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: https://your-instance.app.n8n.cloud/api/v1`

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/set_api_key YOUR_API_KEY https://your-instance.app.n8n.cloud/api/v1`
                """
            
            success = await self.session_service.set_user_n8n_config(user_id, api_key, base_url)
            
            if success:
                return f"‚úÖ **API –∫–ª—é—á n8n –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n–°–µ—Ä–≤–µ—Ä: {base_url}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å workflows."
            else:
                return "‚ùå **–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ URL —Å–µ—Ä–≤–µ—Ä–∞."
                
        except Exception as e:
            logger.error(f"Error setting API key: {e}")
            return f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞: {str(e)}"
    
    def get_help_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return """
ü§ñ **N8N Template Manager Bot**

–Ø —É–º–µ—é:
‚Ä¢ üîç –ò—Å–∫–∞—Ç—å —à–∞–±–ª–æ–Ω—ã n8n –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚Ä¢ üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä n8n
‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ ‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflows
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

**–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
- "–ù–∞–π–¥–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ email"
- "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —à–∞–±–ª–æ–Ω AI DJ –Ω–∞ –º–æ–π —Å–µ—Ä–≤–µ—Ä"
- "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ workflows"
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å"
- "–£—Å—Ç–∞–Ω–æ–≤–∏ API –∫–ª—é—á: YOUR_KEY –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: YOUR_URL"

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞
/set_api_key - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á n8n
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/my_workflows - –ú–æ–∏ workflows

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º! üöÄ
        """
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        memory = self.get_user_memory(user_id)
        memory['started_at'] = datetime.now().isoformat()
        memory['message_count'] = memory.get('message_count', 0)
        self.set_user_memory(user_id, memory)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_data = await self.session_service.get_user_session_data(user_id)
        
        welcome_message = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!

{self.get_help_message()}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {self.templates_db['total_templates']}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.templates_db['categories'])}

üîß **–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**
‚Ä¢ n8n API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if session_data.get('has_n8n_config') else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º n8n! üéØ
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤", callback_data="search_templates")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def set_api_key_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_api_key"""
        if len(context.args) < 2:
            await update.message.reply_text(
                "üîë **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ n8n**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/set_api_key YOUR_API_KEY https://your-instance.app.n8n.cloud/api/v1`\n\n"
                "–ì–¥–µ:\n"
                "‚Ä¢ YOUR_API_KEY - –≤–∞—à API –∫–ª—é—á n8n\n"
                "‚Ä¢ URL - –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ n8n —Å–µ—Ä–≤–µ—Ä–∞",
                parse_mode='Markdown'
            )
            return
        
        api_key = context.args[0]
        base_url = context.args[1]
        user_id = update.effective_user.id
        
        thinking_msg = await self.show_thinking(update, context, "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n...")
        
        success = await self.session_service.set_user_n8n_config(user_id, api_key, base_url)
        
        await thinking_msg.delete()
        
        if success:
            await update.message.reply_text(
                f"‚úÖ **API –∫–ª—é—á n8n –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                f"–°–µ—Ä–≤–µ—Ä: {base_url}\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å workflows.",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞**\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ URL —Å–µ—Ä–≤–µ—Ä–∞.",
                parse_mode='Markdown'
            )
    
    async def my_workflows_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_workflows"""
        user_id = update.effective_user.id
        
        thinking_msg = await self.show_thinking(update, context, "–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö workflows...")
        
        workflows = await self.workflow_service.get_user_workflows(user_id)
        
        await thinking_msg.delete()
        
        if not workflows:
            await update.message.reply_text(
                "üìã **–í–∞—à–∏ workflows**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö workflows.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö workflows.",
                parse_mode='Markdown'
            )
            return
        
        message = "üìã **–í–∞—à–∏ workflows:**\n\n"
        for workflow in workflows:
            status_emoji = "‚ñ∂Ô∏è" if workflow['status'] == 'active' else "‚è∏Ô∏è"
            message += f"{status_emoji} **{workflow['workflow_name']}**\n"
            message += f"   ID: `{workflow['workflow_id']}`\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {workflow['status']}\n"
            message += f"   –°–æ–∑–¥–∞–Ω: {workflow['created_at'][:10]}\n\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        
        thinking_msg = await self.show_thinking(update, context, "–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–±–ª–æ–Ω–æ–≤
        categories_stats = await self.template_service.get_categories_with_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_workflows = await self.workflow_service.get_user_workflows(user_id)
        execution_stats = await self.execution_service.get_execution_statistics(user_id)
        
        await thinking_msg.delete()
        
        message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        message += f"üóÇÔ∏è **–ë–∞–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤:**\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {categories_stats['total_templates']}\n"
        message += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_stats['total_categories']}\n\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        message += "üèÜ **–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
        sorted_categories = sorted(
            categories_stats['categories'].items(), 
            key=lambda x: x[1]['count'], 
            reverse=True
        )[:5]
        
        for category, data in sorted_categories:
            message += f"‚Ä¢ {category}: {data['count']} ({data['percentage']}%)\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message += f"\nüë§ **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        message += f"‚Ä¢ Workflows: {len(user_workflows)}\n"
        
        if execution_stats:
            message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π (7 –¥–Ω–µ–π): {execution_stats.get('total_executions', 0)}\n"
            message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {execution_stats.get('success_rate', 0):.1f}%\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        memory = self.get_user_memory(user_id)
        memory['message_count'] = memory.get('message_count', 0) + 1
        memory['last_message'] = text
        memory['last_message_time'] = datetime.now().isoformat()
        self.set_user_memory(user_id, memory)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è
        thinking_msg = await self.show_thinking(update, context, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        # NLU –æ–±—Ä–∞–±–æ—Ç–∫–∞
        await self.update_thinking(thinking_msg, "–û–ø—Ä–µ–¥–µ–ª—è—é –Ω–∞–º–µ—Ä–µ–Ω–∏–µ...")
        nlu_result = await self.process_natural_language(text, user_id)
        
        # –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        await self.update_thinking(thinking_msg, f"–í—ã–∑—ã–≤–∞—é –∞–≥–µ–Ω—Ç–∞ –¥–ª—è '{nlu_result['intent']}'...")
        response = await self.orchestrate_agents(
            nlu_result['intent'], 
            nlu_result['entities'], 
            user_id
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ã—à–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await thinking_msg.delete()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
        if isinstance(response, dict) and 'file_data' in response:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                json.dump(response['file_data'], f, indent=2, ensure_ascii=False)
                f.flush()
                
                with open(f.name, 'rb') as file:
                    await update.message.reply_document(
                        document=InputFile(file, filename=response.get('filename', 'template.json')),
                        caption=response.get('message', '–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞'),
                        parse_mode='Markdown'
                    )
                
                os.unlink(f.name)
        else:
            await update.message.reply_text(response, parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "search_templates":
            await query.edit_message_text(
                "üîç **–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ 'AI email automation'\n"
                "‚Ä¢ '–ö–∞—Ç–µ–≥–æ—Ä–∏—è: Marketing'\n"
                "‚Ä¢ '–ù–∞–π–¥–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è Telegram'",
                parse_mode='Markdown'
            )
        elif query.data == "show_stats":
            # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self.stats_command(update, context)
        elif query.data == "settings":
            await query.edit_message_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π n8n –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/set_api_key YOUR_API_KEY https://your-instance.app.n8n.cloud/api/v1`\n\n"
                "–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ `/my_workflows` - –ú–æ–∏ workflows\n"
                "‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞",
                parse_mode='Markdown'
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", lambda u, c: u.message.reply_text(self.get_help_message(), parse_mode='Markdown')))
        application.add_handler(CommandHandler("set_api_key", self.set_api_key_command))
        application.add_handler(CommandHandler("my_workflows", self.my_workflows_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()


# –ê–≥–µ–Ω—Ç—ã
class TemplateAgent:
    def __init__(self, template_service: TemplateService):
        self.template_service = template_service
    
    async def handle_request(self, intent: str, entities: Dict[str, Any], user_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
        if intent == 'search_template':
            category = entities.get('category', '')
            keywords = entities.get('keywords', [])
            query = ' '.join(keywords) if keywords else None
            
            templates = await self.template_service.search_templates(
                query=query, 
                category=category, 
                limit=5
            )
            
            if not templates:
                return f"üîç **–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤**\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query or category}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            
            message = f"üîç **–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}**\n\n"
            for i, template in enumerate(templates, 1):
                message += f"{i}. **{template['name']}**\n"
                message += f"   üìÇ {template['category']} | üè∑Ô∏è {template['complexity']}\n"
                message += f"   üìù {template['description'][:100]}...\n"
                message += f"   üì• –ó–∞–≥—Ä—É–∑–æ–∫: {template['download_count']}\n\n"
            
            message += "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —à–∞–±–ª–æ–Ω [–Ω–∞–∑–≤–∞–Ω–∏–µ]'"
            return message
        
        elif intent == 'get_categories':
            stats = await self.template_service.get_categories_with_stats()
            
            message = "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:**\n\n"
            sorted_categories = sorted(
                stats['categories'].items(), 
                key=lambda x: x[1]['count'], 
                reverse=True
            )
            
            for category, data in sorted_categories:
                message += f"‚Ä¢ **{category}**: {data['count']} —à–∞–±–ª–æ–Ω–æ–≤ ({data['percentage']}%)\n"
            
            message += f"\nüìä –í—Å–µ–≥–æ: {stats['total_templates']} —à–∞–±–ª–æ–Ω–æ–≤ –≤ {stats['total_categories']} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"
            return message
        
        elif intent == 'show_stats':
            popular = await self.template_service.get_popular_templates(5)
            
            message = "üèÜ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**\n\n"
            for i, template in enumerate(popular, 1):
                message += f"{i}. **{template['name']}**\n"
                message += f"   üì• {template['download_count']} –∑–∞–≥—Ä—É–∑–æ–∫\n"
                message += f"   üìÇ {template['category']}\n\n"
            
            return message
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ —à–∞–±–ª–æ–Ω–∞–º."


class ServerAgent:
    def __init__(self, workflow_service: UserWorkflowService):
        self.workflow_service = workflow_service
    
    async def handle_request(self, intent: str, entities: Dict[str, Any], user_id: int) -> Any:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–µ—Ä–≤–µ—Ä—É n8n"""
        if intent == 'import_template':
            template_name = entities.get('template_name', '')
            
            # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            template_service = TemplateService()
            templates = await template_service.search_templates(query=template_name, limit=1)
            
            if not templates:
                return f"‚ùå –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤."
            
            template = templates[0]
            result = await self.workflow_service.import_template_to_n8n(user_id, template['id'])
            
            if result['success']:
                return f"‚úÖ **–®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!**\n\nüìã **{template['name']}**\nüÜî Workflow ID: `{result['workflow_id']}`\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n\n‚ñ∂Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: '–ê–∫—Ç–∏–≤–∏—Ä—É–π workflow {result['workflow_id']}'"
            else:
                return f"‚ùå **–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:**\n{result['error']}"
        
        elif intent == 'export_template':
            workflow_id = entities.get('workflow_id', '')
            
            if not workflow_id:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID workflow –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π workflow 12345'"
            
            result = await self.workflow_service.export_workflow(user_id, workflow_id)
            
            if result['success']:
                return {
                    'message': f"üì§ **Workflow —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!**\n\nüìã –§–∞–π–ª: {result['filename']}",
                    'file_data': result['data'],
                    'filename': result['filename']
                }
            else:
                return f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:**\n{result['error']}"
        
        elif intent == 'activate_workflow':
            workflow_id = entities.get('workflow_id', '')
            
            if not workflow_id:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID workflow –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n–ü—Ä–∏–º–µ—Ä: '–ê–∫—Ç–∏–≤–∏—Ä—É–π workflow 12345'"
            
            result = await self.workflow_service.activate_workflow(user_id, workflow_id)
            
            if result['success']:
                return f"‚ñ∂Ô∏è **Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\nüÜî ID: `{workflow_id}`\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
            else:
                return f"‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**\n{result['error']}"
        
        elif intent == 'deactivate_workflow':
            workflow_id = entities.get('workflow_id', '')
            
            if not workflow_id:
                return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID workflow –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n–ü—Ä–∏–º–µ—Ä: '–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π workflow 12345'"
            
            result = await self.workflow_service.deactivate_workflow(user_id, workflow_id)
            
            if result['success']:
                return f"‚è∏Ô∏è **Workflow –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\nüÜî ID: `{workflow_id}`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            else:
                return f"‚ùå **–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**\n{result['error']}"
        
        elif intent == 'list_workflows':
            workflows = await self.workflow_service.get_user_workflows(user_id)
            
            if not workflows:
                return "üìã **–í–∞—à–∏ workflows**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö workflows."
            
            message = f"üìã **–í–∞—à–∏ workflows ({len(workflows)}):**\n\n"
            for workflow in workflows:
                status_emoji = "‚ñ∂Ô∏è" if workflow['status'] == 'active' else "‚è∏Ô∏è"
                message += f"{status_emoji} **{workflow['workflow_name']}**\n"
                message += f"   üÜî `{workflow['workflow_id']}`\n"
                message += f"   üìä {workflow['status']}\n\n"
            
            return message
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ n8n."


class ResearchAgent:
    async def handle_request(self, intent: str, entities: Dict[str, Any], user_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
        keywords = entities.get('keywords', [])
        return f"üî¨ **–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É**: {', '.join(keywords)}\n\n–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ä¢ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ n8n 1.0\n‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI —Å–µ—Ä–≤–∏—Å–∞–º–∏\n‚Ä¢ Best practices –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"


class AnalystAgent:
    def __init__(self, execution_service: ExecutionLogService):
        self.execution_service = execution_service
    
    async def handle_request(self, intent: str, entities: Dict[str, Any], user_id: int) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
        stats = await self.execution_service.get_execution_statistics(user_id)
        
        if not stats or stats.get('total_executions', 0) == 0:
            return "üìä **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ workflows –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        
        message = "üìä **–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (7 –¥–Ω–µ–π):**\n\n"
        message += f"üìà –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['total_executions']}\n"
        message += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_executions']}\n"
        message += f"‚ùå –û—à–∏–±–æ–∫: {stats['failed_executions']}\n"
        message += f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%\n"
        message += f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['average_duration_seconds']:.1f}—Å\n"
        message += f"üìÖ –í –¥–µ–Ω—å: {stats['executions_per_day']:.1f}\n"
        
        if stats['failed_executions'] > 0:
            message += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {stats['failed_executions']} –æ—à–∏–±–æ–∫"
        
        return message


if __name__ == "__main__":
    bot = N8nTelegramBot()
    bot.run()
