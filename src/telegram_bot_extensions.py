import os
import tempfile
import json
import logging
from typing import Dict, Any, Optional
from telegram import Update, InputFile
from telegram.ext import ContextTypes
from telegram.constants import ChatAction

logger = logging.getLogger(__name__)

class TelegramBotExtensions:
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
    
    async def format_agent_result(self, result: Dict[str, Any], intent: str) -> Any:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            task_result = result.get('result', {})
            agent_thoughts = task_result.get('agent_thoughts', {})
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            thinking_text = ""
            if agent_thoughts.get('success', False):
                thinking_text = f"\n\nüß† **–ú—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞:** {agent_thoughts.get('content', '')[:200]}..."
            
            if intent == 'search_template':
                return await self._format_search_result(task_result, thinking_text)
            elif intent == 'get_categories':
                return await self._format_categories_result(task_result, thinking_text)
            elif intent == 'import_template':
                return await self._format_import_result(task_result, thinking_text)
            elif intent == 'export_template':
                return await self._format_export_result(task_result, thinking_text)
            elif intent in ['activate_workflow', 'deactivate_workflow']:
                return await self._format_workflow_action_result(task_result, intent, thinking_text)
            elif intent == 'list_workflows':
                return await self._format_workflows_list_result(task_result, thinking_text)
            else:
                return f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ{thinking_text}"
                
        except Exception as e:
            logger.error(f"Error formatting agent result: {e}")
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
    
    async def _format_search_result(self, result: Dict[str, Any], thinking_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        templates = result.get('templates', [])
        
        if not templates:
            return f"üîç **–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤**\n\n–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.{thinking_text}"
        
        message = f"üîç **–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}**\n\n"
        
        for i, template in enumerate(templates[:5], 1):
            message += f"{i}. **{template['name']}**\n"
            message += f"   üìÇ {template['category']} | üè∑Ô∏è {template.get('complexity', 'Unknown')}\n"
            message += f"   üìù {template['description'][:100]}...\n"
            message += f"   üì• –ó–∞–≥—Ä—É–∑–æ–∫: {template.get('download_count', 0)}\n\n"
        
        message += "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —à–∞–±–ª–æ–Ω [–Ω–∞–∑–≤–∞–Ω–∏–µ]'"
        message += thinking_text
        
        return message
    
    async def _format_categories_result(self, result: Dict[str, Any], thinking_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = result.get('categories', {})
        
        if not categories:
            return f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤**\n\n–î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.{thinking_text}"
        
        message = "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:**\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_categories = sorted(categories.items(), key=lambda x: x[1].get('count', 0), reverse=True)
        
        for category, data in sorted_categories[:10]:
            count = data.get('count', 0)
            message += f"‚Ä¢ **{category}**: {count} —à–∞–±–ª–æ–Ω–æ–≤\n"
        
        total = result.get('total_templates', 0)
        message += f"\nüìä –í—Å–µ–≥–æ: {total} —à–∞–±–ª–æ–Ω–æ–≤"
        message += thinking_text
        
        return message
    
    async def _format_import_result(self, result: Dict[str, Any], thinking_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞"""
        if result.get('success', False):
            workflow_id = result.get('workflow_id', 'Unknown')
            message = f"‚úÖ **–®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!**\n\n"
            message += f"üÜî Workflow ID: `{workflow_id}`\n"
            message += f"‚ñ∂Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: '–ê–∫—Ç–∏–≤–∏—Ä—É–π workflow {workflow_id}'"
            message += thinking_text
            return message
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            return f"‚ùå **–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:**\n{error}{thinking_text}"
    
    async def _format_export_result(self, result: Dict[str, Any], thinking_text: str) -> Any:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if result.get('success', False):
            filename = result.get('filename', 'workflow.json')
            data = result.get('data', {})
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
            return {
                'message': f"üì§ **Workflow —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!**\n\n–§–∞–π–ª: {filename}{thinking_text}",
                'file_data': data,
                'filename': filename
            }
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            return f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:**\n{error}{thinking_text}"
    
    async def _format_workflow_action_result(self, result: Dict[str, Any], intent: str, thinking_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏–π —Å workflow"""
        if result.get('success', False):
            action = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if intent == 'activate_workflow' else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            emoji = "‚ñ∂Ô∏è" if intent == 'activate_workflow' else "‚è∏Ô∏è"
            
            message = f"{emoji} **Workflow {action}!**\n\n"
            message += f"üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
            message += thinking_text
            return message
        else:
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            return f"‚ùå **–û—à–∏–±–∫–∞:**\n{error}{thinking_text}"
    
    async def _format_workflows_list_result(self, result: Dict[str, Any], thinking_text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ workflows"""
        workflows = result.get('workflows', [])
        
        if not workflows:
            return f"üìã **–í–∞—à–∏ workflows**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö workflows.{thinking_text}"
        
        message = f"üìã **–í–∞—à–∏ workflows ({len(workflows)}):**\n\n"
        
        for workflow in workflows[:10]:
            status_emoji = "‚ñ∂Ô∏è" if workflow.get('status') == 'active' else "‚è∏Ô∏è"
            message += f"{status_emoji} **{workflow.get('workflow_name', 'Unknown')}**\n"
            message += f"   üÜî `{workflow.get('workflow_id', 'Unknown')}`\n"
            message += f"   üìä {workflow.get('status', 'unknown')}\n\n"
        
        message += thinking_text
        return message
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            voice = update.message.voice
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
            thinking_msg = await update.message.reply_text("üé§ *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...*", parse_mode='Markdown')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(voice.file_id)
            file_url = file.file_path
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await thinking_msg.edit_text("üé§ *–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...*", parse_mode='Markdown')
            voice_result = await self.bot.voice_service.process_voice_message(file_url, voice.file_id)
            
            if not voice_result['success']:
                await thinking_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {voice_result['error']}")
                return
            
            # –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = voice_result['text']
            await thinking_msg.edit_text(f"üé§ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* {text[:100]}...\n\nü§î *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...*", parse_mode='Markdown')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            await self.bot.memory_service.store_conversation(user_id, {
                'type': 'voice',
                'text': text,
                'duration': voice_result.get('duration')
            })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            nlu_result = await self.bot.process_natural_language(text, user_id)
            response = await self.bot.orchestrate_agents(
                nlu_result['intent'], 
                nlu_result['entities'], 
                user_id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—ã—à–ª–µ–Ω–∏–∏
            await thinking_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if isinstance(response, dict) and 'file_data' in response:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                    json.dump(response['file_data'], f, indent=2, ensure_ascii=False)
                    f.flush()
                    
                    with open(f.name, 'rb') as file:
                        await update.message.reply_document(
                            document=InputFile(file, filename=response.get('filename', 'template.json')),
                            caption=response.get('message', '–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞'),
                            parse_mode='Markdown'
                        )
                    
                    os.unlink(f.name)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                await update.message.reply_text(response, parse_mode='Markdown')
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                if len(response) < 500:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                    voice_file = await self.bot.voice_service.synthesize_speech(response)
                    if voice_file:
                        with open(voice_file, 'rb') as audio:
                            await update.message.reply_voice(
                                voice=InputFile(audio, filename="response.mp3"),
                                caption="üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"
                            )
                        os.unlink(voice_file)
            
        except Exception as e:
            logger.error(f"Error handling voice message: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    async def show_agent_thinking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
            system_status = await self.bot.orchestrator.get_system_status()
            
            message = "üß† **–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤:**\n\n"
            
            for agent_name, agent_status in system_status['agents'].items():
                status_emoji = "üü¢" if not agent_status['is_busy'] else "üî¥"
                message += f"{status_emoji} **{agent_name}**\n"
                message += f"   üìä –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {agent_status['performance']['tasks_completed']}\n"
                message += f"   ‚ùå –û—à–∏–±–æ–∫: {agent_status['performance']['tasks_failed']}\n"
                
                if agent_status['current_task']:
                    message += f"   üîÑ –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {agent_status['current_task'].get('type', 'Unknown')}\n"
                
                message += "\n"
            
            message += f"üìà **–°–∏—Å—Ç–µ–º–∞:**\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {system_status['active_tasks']}\n"
            message += f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {system_status['queue_size']}\n"
            message += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_status['uptime']:.0f}—Å\n"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing agent thinking: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {str(e)}")
    
    async def handle_reminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remind [–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö] [—Å–æ–æ–±—â–µ–Ω–∏–µ]`\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `/remind 30 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å workflows`",
                    parse_mode='Markdown'
                )
                return
            
            try:
                delay_minutes = int(context.args[0])
                message = ' '.join(context.args[1:])
            except ValueError:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
                return
            
            user_id = update.effective_user.id
            delay_seconds = delay_minutes * 60
            
            reminder_id = await self.bot.reminder_service.set_reminder(
                user_id, message, delay_seconds
            )
            
            if reminder_id:
                await update.message.reply_text(
                    f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
                    f"‚è±Ô∏è –ß–µ—Ä–µ–∑: {delay_minutes} –º–∏–Ω—É—Ç\n"
                    f"üÜî ID: `{reminder_id}`",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"Error handling reminder command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_thinking_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            agent_name = context.args[0] if context.args else None
            
            if not agent_name:
                await self.show_agent_thinking(update, context)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –º—ã—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            thoughts = await self.bot.orchestrator.get_agent_thoughts(agent_name, 3)
            
            if 'error' in thoughts:
                await update.message.reply_text(f"‚ùå {thoughts['error']}")
                return
            
            message = f"üß† **–ú—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}:**\n\n"
            
            recent_thoughts = thoughts.get('recent_thoughts', [])
            if not recent_thoughts:
                message += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π."
            else:
                for i, thought_item in enumerate(recent_thoughts[-3:], 1):
                    thought = thought_item['thought']
                    message += f"{i}. **{thought.get('type', 'Unknown')}** ({thought.get('level', 'surface')})\n"
                    message += f"   üí≠ {thought.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è')[:150]}...\n"
                    message += f"   üïê {thought.get('timestamp', 'Unknown')[:19]}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ã—à–ª–µ–Ω–∏—è
            patterns = thoughts.get('thinking_patterns', {})
            if patterns:
                message += "üìä **–ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è:**\n"
                for pattern, count in patterns.items():
                    message += f"‚Ä¢ {pattern}: {count}\n"
            
            avg_quality = thoughts.get('average_quality', 0)
            message += f"\n‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.2f}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error handling thinking command: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def start_orchestrator(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            await self.bot.orchestrator.start()
            logger.info("Agent orchestrator started successfully")
        except Exception as e:
            logger.error(f"Error starting orchestrator: {e}")
    
    async def stop_orchestrator(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            await self.bot.orchestrator.stop()
            logger.info("Agent orchestrator stopped")
        except Exception as e:
            logger.error(f"Error stopping orchestrator: {e}")
